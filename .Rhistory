'))),
# _ Header ----
shinydashboard::box(
width = 12,
solidHeader = TRUE,
tags$img(src = "DEQ-logo-color-horizontal370x73.png"),
tags$div(span("Satellite Imagery of Cyanobacteria in Oregon Lakes and Reservoirs",
style = "color: black; font-size: 40px"))
,
tags$div(span(HTML(paste0("Last sourced from the ",
a("U.S. EPA CyAN Project",
href="https://www.epa.gov/water-research/cyanobacteria-assessment-network-cyan"),
" on: ",
max(dta$Date))),
style = "color: black; font-size: 20px"))
#tags$br(),
#,
#tags$div(span(HTML(paste0("A Map Application for cyanobacteria blooms from the ",
#                          a("U.S. EPA CyAN Project",
#                            href="https://www.epa.gov/water-research/cyanobacteria-assessment-network-cyan"))),
#              style = "color: black; font-size: 20px")),
#tags$br(),
), # Header box END
# _ Part 1: Mapping data ----
shinydashboardPlus::box(
width = 12,
#title = "Mapping Data",
status = "primary",
solidHeader = FALSE,
collapsible = FALSE,
collapsed = FALSE,
#dropdownMenu = boxDropdown(),
shinydashboard::box(
width = 3,
#title = "date_and_waterbody",
solidHeader = TRUE,
# __ Select a Date ----
#tags$style(HTML(".datepicker {z-index:99999 !important;}")),
shiny::dateInput(inputId = "date_map",
label = tags$h4("Select a Date:"),
value = max(dta$Date),
min = min(dta$Date),
max = max(dta$Date),
format = "yyyy-mm-dd",
startview = "month",
weekstart = 0,
datesdisabled = missing.dates$Date),
# __ Max 7D Means ----
uiOutput("top10"),
#tags$hr(),
# __ Select a Basin ----
shinyWidgets::pickerInput(inputId = "basin",
label = tags$h4("Select a Basin:"),
choices = list(
"Oregon",
"HUC6 Basin" = unique(sort(huc6@data$HU_6_NAME))
),
multiple = FALSE),
#tags$hr(),
# __ Select a Waterbody ----
shinyWidgets::pickerInput(inputId = "waterbody",
label = tags$h4("Select a Waterbody:"),
choices = list(
"Oregon",
"Waterbody Name_GNISID" = unique(sort(lakes.resolvable$GNISIDNAME))
source("//deqhq1/WQ-Share/Harmful Algal Blooms Coordination Team/HAB_Shiny_app/data.R")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
library(tidyverse)
library(lubridate)
library(readxl)
library(rgdal)
library(sf)
library(raster)
library(leaflet)
library(RColorBrewer)
library(rasterVis)
library(zoo)
# (3) Map: shapefiles ----
lakes.resolvable <- sf::st_read(dsn = "./data/updatedValidLakes_CyAN_OR.shp",
layer = "updatedValidLakes_CyAN_OR") %>%
st_transform(crs = 4326) %>%
dplyr::filter(GNISIDNAME %in% dta1$inApp) # filter out saline lakes
# (1) Data Table ----
dta1 <- readxl::read_xlsx("./data/Resolvable_Lakes.xlsx", sheet = "cyan_resolvable_lakes")
dta2 <- readxl::read_xlsx("./data/HAB_resolvablelakes_2022.xlsx", sheet = "HAB_resolvable_lake_data") %>%
#dplyr::filter(!GNISIDNAME == "Goose Lake_01520146") %>% # located in the WA state
#dplyr::filter(GNISIDNAME %in% unique(sort(lakes.resolvable$GNISIDNAME))) %>%
dplyr::filter(GNISIDNAME %in% dta1$inApp) # filter out saline lakes
dta3 <- readxl::read_xlsx("./data/HAB_resolvablelakes_2016_2021.xlsx",sheet = "HAB_resolvablelakes_2016_2021") %>%
#dplyr::filter(!GNISIDNAME == "Goose Lake_01520146") %>% # located in the WA state
#dplyr::filter(GNISIDNAME %in% unique(sort(lakes.resolvable$GNISIDNAME))) %>%
dplyr::filter(GNISIDNAME %in% dta1$inApp) # filter out saline lakes
dta <- rbind(dta2,dta3) %>%
dplyr::rename(Mean = MEAN_cellsml,
Maximum = MAX_cellsml,
Minimum = MIN_cellsml) %>%
tidyr::gather(`Summary Statistics`, `Cyanobacteria (cells/mL)`, -GNISIDNAME,-COUNT,-AREA,-PercentArea_Value, -Day,-Year,-Date) %>%
tidyr::separate(GNISIDNAME,c("GNISNAME","GNISID"), sep="_") %>%
dplyr::mutate(GNISIDNAME = paste0(GNISNAME,"_",GNISID)) %>%
dplyr::mutate(Date = lubridate::ymd(Date)) %>%
dplyr::arrange(desc(Date)) %>%
dplyr::mutate(wi_DWSA = ifelse(GNISIDNAME %in% dta1$wi_DWSA, "Yes", "No"))
# (2) Date Lookup Table ----
fulldays <- readxl::read_xlsx("./data/calendar-dates.xlsx",
sheet = "calendar-dates") %>%
dplyr::mutate(Date = lubridate::ymd(Date))
lookup.date <- dta %>%
dplyr::group_by(Date, Year, Day) %>%
dplyr::summarise(n=n()) %>%
dplyr::right_join(fulldays, by="Date") %>%
dplyr::rename(Year.dta = Year.x,
Day.dta = Day.x,
Year.fulldays = Year.y,
Day.fulldays = Day.y)
missing.dates <- lookup.date %>%
dplyr::filter(is.na(Day.dta))
# (3) Map: shapefiles ----
lakes.resolvable <- sf::st_read(dsn = "./data/updatedValidLakes_CyAN_OR.shp",
layer = "updatedValidLakes_CyAN_OR") %>%
st_transform(crs = 4326) %>%
dplyr::filter(GNISIDNAME %in% dta1$inApp) # filter out saline lakes
view(lakes.resolvable)
shiny::runApp()
source("//deqhq1/WQ-Share/Harmful Algal Blooms Coordination Team/HAB_Shiny_app/data.R")
shiny::runApp()
source("//deqhq1/WQ-Share/Harmful Algal Blooms Coordination Team/HAB_Shiny_app/data.R")
source("//deqhq1/WQ-Share/Harmful Algal Blooms Coordination Team/HAB_Shiny_app/data.R")
shiny::runApp()
source("//deqhq1/WQ-Share/Harmful Algal Blooms Coordination Team/HAB_Shiny_app/data.R")
# (1) Data Table ----
dta1 <- readxl::read_xlsx("./data/Resolvable_Lakes.xlsx", sheet = "cyan_resolvable_lakes")
dta2 <- readxl::read_xlsx("./data/HAB_resolvablelakes_2022.xlsx", sheet = "HAB_resolvable_lake_data") %>%
#dplyr::filter(!GNISIDNAME == "Goose Lake_01520146") %>% # located in the WA state
#dplyr::filter(GNISIDNAME %in% unique(sort(lakes.resolvable$GNISIDNAME))) %>%
dplyr::filter(GNISIDNAME %in% dta1$inApp) # filter out saline lakes
dta3 <- readxl::read_xlsx("./data/HAB_resolvablelakes_2016_2021.xlsx",sheet = "HAB_resolvablelakes_2016_2021") %>%
#dplyr::filter(!GNISIDNAME == "Goose Lake_01520146") %>% # located in the WA state
#dplyr::filter(GNISIDNAME %in% unique(sort(lakes.resolvable$GNISIDNAME))) %>%
dplyr::filter(GNISIDNAME %in% dta1$inApp) # filter out saline lakes
dta <- rbind(dta2,dta3) %>%
dplyr::rename(Mean = MEAN_cellsml,
Maximum = MAX_cellsml,
Minimum = MIN_cellsml) %>%
tidyr::gather(`Summary Statistics`, `Cyanobacteria (cells/mL)`, -GNISIDNAME,-COUNT,-AREA,-PercentArea_Value, -Day,-Year,-Date) %>%
tidyr::separate(GNISIDNAME,c("GNISNAME","GNISID"), sep="_") %>%
dplyr::mutate(GNISIDNAME = paste0(GNISNAME,"_",GNISID)) %>%
dplyr::mutate(Date = lubridate::ymd(Date)) %>%
dplyr::arrange(desc(Date)) %>%
dplyr::mutate(wi_DWSA = ifelse(GNISIDNAME %in% dta1$wi_DWSA, "Yes", "No"))
colnames(dta3)
dta3 <- readxl::read_xlsx("./data/HAB_resolvablelakes_2016_2021.xlsx",sheet = "HAB_resolvablelakes_2016_2021") %>%
#dplyr::filter(!GNISIDNAME == "Goose Lake_01520146") %>% # located in the WA state
#dplyr::filter(GNISIDNAME %in% unique(sort(lakes.resolvable$GNISIDNAME))) %>%
dplyr::filter(GNISIDNAME %in% dta1$inApp) %>% # filter out saline lakes
dplyr::select(-c(13,14)) # remove two last columns for excel data summary
dta <- rbind(dta2,dta3) %>%
dplyr::rename(Mean = MEAN_cellsml,
Maximum = MAX_cellsml,
Minimum = MIN_cellsml) %>%
tidyr::gather(`Summary Statistics`, `Cyanobacteria (cells/mL)`, -GNISIDNAME,-COUNT,-AREA,-PercentArea_Value, -Day,-Year,-Date) %>%
tidyr::separate(GNISIDNAME,c("GNISNAME","GNISID"), sep="_") %>%
dplyr::mutate(GNISIDNAME = paste0(GNISNAME,"_",GNISID)) %>%
dplyr::mutate(Date = lubridate::ymd(Date)) %>%
dplyr::arrange(desc(Date)) %>%
dplyr::mutate(wi_DWSA = ifelse(GNISIDNAME %in% dta1$wi_DWSA, "Yes", "No"))
fulldays <- readxl::read_xlsx("./data/calendar-dates.xlsx",
sheet = "calendar-dates") %>%
dplyr::mutate(Date = lubridate::ymd(Date))
lookup.date <- dta %>%
dplyr::group_by(Date, Year, Day) %>%
dplyr::summarise(n=n()) %>%
dplyr::right_join(fulldays, by="Date") %>%
dplyr::rename(Year.dta = Year.x,
Day.dta = Day.x,
Year.fulldays = Year.y,
Day.fulldays = Day.y)
missing.dates <- lookup.date %>%
dplyr::filter(is.na(Day.dta))
# (3) Map: shapefiles ----
lakes.resolvable <- sf::st_read(dsn = "./data/CyAN_Waterbodies.shp",
layer = "CyAN_Waterbodies") %>%
st_transform(crs = 4326) %>%
dplyr::filter(GNISIDNAME %in% dta1$inApp) # filter out saline lakes
state.boundary <- sf::st_read("./data/state_boundary_blm.shp") %>%
st_transform(crs = 4326)
huc6 <- sf::st_read(dsn = "./data/WBD_HU6.shp",layer = "WBD_HU6")%>%
st_transform(crs = 4326)
pal.huc6 <- leaflet::colorFactor(palette = "Paired", domain = unique(sort(huc6$HU_6_NAME)))
# (4) Map: raster ----
# Raster color
thevalues <- c(0,6310,20000,100000,7000000)
#paletteFunc <- grDevices::colorRampPalette(c('#bdbdbd','#66c2a4','#2ca25f','#006d2c'))
#palette     <- paletteFunc(4)
palette <- c('#bdbdbd','#66c2a4','#2ca25f','#006d2c')
pal.map <- leaflet::colorBin(palette = palette,
bins = c(0,6310,20000,100000,7000000),
domain = c(0,6310,20000,100000,7000000),
na.color = "transparent")
# Legend labels
labels = c("Non-detect","Low: 6,311 - 20,000","Moderate: 20,000 - 100,000","High: >100,000")
# ----
#rm(dta1); rm(dta2); rm(dta3)
save.image(file = "data.RData")
shiny::runApp()
library(reticulate)   # Bridging R and Python
# Need to point to the ArcPro Python version - Change as needed
use_python("C:\\Program Files\\ArcGIS\\Pro\\bin\\Python\\envs\\arcgispro-py3\\python.exe",
required = T)
# Runs python script
py_run_file("Package_test.py")
R.home()
Sys.setenv(RETICULATE_PYTHON = "C:\\Program Files\\ArcGIS\\Pro\\bin\\Python\\envs\\arcgispro-py3")
install.packages("reticulate")
install.packages("reticulate")
Sys.setenv(RETICULATE_PYTHON = "C:\\Program Files\\ArcGIS\\Pro\\bin\\Python\\envs\\arcgispro-py3")
library(reticulate)   # Bridging R and Python
# Need to point to the ArcPro Python version - Change as needed
use_python("C:\\Program Files\\ArcGIS\\Pro\\bin\\Python\\envs\\arcgispro-py3\\python.exe",
required = T)
Sys.setenv(RETICULATE_PYTHON = "C:\\Program Files\\ArcGIS\\Pro\\bin\\Python\\envs\\arcgispro-py3\\python.exe")
library(reticulate)   # Bridging R and Python
# Need to point to the ArcPro Python version - Change as needed
use_python("C:\\Program Files\\ArcGIS\\Pro\\bin\\Python\\envs\\arcgispro-py3\\python.exe",
required = T)
# Runs python script
py_run_file("Package_test.py")
# Runs python script
py_run_file("Package_test.py")
reticulate::repl_python()
# Check to make sure right version of python is in use (3.7.10)
print(sys.version_info)
if sys.version_info < (3, 7):
print('Please upgrade your Python version to 3.7.0 or higher')
sys.exit()
# Gets the appropriate date range for the current query
# Note that the query can only be done for the current year
year = str(date.today().year)
# year = str("2020")
print("Year:", year)
Sys.setenv(RETICULATE_PYTHON = "C:\\Program Files\\ArcGIS\\Pro\\bin\\Python\\envs\\arcgispro-py3\\python.exe") # Need to correct python default in R
library(reticulate)   # Bridging R and Python
# Need to point to the ArcPro Python version - Change as needed
use_python("C:\\Program Files\\ArcGIS\\Pro\\bin\\Python\\envs\\arcgispro-py3\\python.exe",
required = T)
# Runs python script
py_run_file("DEQ_CyAN_HABs_Get_NASA_Data.py")
library(tidyverse)
library(lubridate)
library(readxl)
library(rgdal)
library(sf)
library(raster)
library(leaflet)
library(RColorBrewer)
library(rasterVis)
library(zoo)
# Get update of NASA data----
# Need to have ArcPro on your machine; modify path in the script to point to the correct version of python
source("Update_NASA_imagery.R")
install.packages("reticulate")
# Get update of NASA data----
# Need to have ArcPro on your machine; modify path in the script to point to the correct version of python
source("Update_NASA_imagery.R")
library(tidyverse)
library(lubridate)
library(readxl)
library(rgdal)
library(sf)
library(raster)
library(leaflet)
library(RColorBrewer)
library(rasterVis)
library(zoo)
# Get update of NASA data----
# Need to have ArcPro on your machine; modify path in the script to point to the correct version of python
source("Update_NASA_imagery.R")
# (1) Data Table ----
dta1 <- readxl::read_xlsx("./data/Resolvable_Lakes.xlsx", sheet = "cyan_resolvable_lakes")
dta2 <- readxl::read_xlsx("./data/HAB_resolvablelakes_2022.xlsx", sheet = "HAB_resolvable_lake_data") %>%
#dplyr::filter(!GNISIDNAME == "Goose Lake_01520146") %>% # located in the WA state
#dplyr::filter(GNISIDNAME %in% unique(sort(lakes.resolvable$GNISIDNAME))) %>%
dplyr::filter(GNISIDNAME %in% dta1$inApp) # filter out saline lakes
dta3 <- readxl::read_xlsx("./data/HAB_resolvablelakes_2016_2021.xlsx",sheet = "HAB_resolvablelakes_2016_2021") %>%
#dplyr::filter(!GNISIDNAME == "Goose Lake_01520146") %>% # located in the WA state
#dplyr::filter(GNISIDNAME %in% unique(sort(lakes.resolvable$GNISIDNAME))) %>%
dplyr::filter(GNISIDNAME %in% dta1$inApp) %>% # filter out saline lakes
dplyr::select(-c(13,14)) # remove two last columns for excel data summary
dta <- rbind(dta2,dta3) %>%
dplyr::rename(Mean = MEAN_cellsml,
Maximum = MAX_cellsml,
Minimum = MIN_cellsml) %>%
tidyr::gather(`Summary Statistics`, `Cyanobacteria (cells/mL)`, -GNISIDNAME,-COUNT,-AREA,-PercentArea_Value, -Day,-Year,-Date) %>%
tidyr::separate(GNISIDNAME,c("GNISNAME","GNISID"), sep="_") %>%
dplyr::mutate(GNISIDNAME = paste0(GNISNAME,"_",GNISID)) %>%
dplyr::mutate(Date = lubridate::ymd(Date)) %>%
dplyr::arrange(desc(Date)) %>%
dplyr::mutate(wi_DWSA = ifelse(GNISIDNAME %in% dta1$wi_DWSA, "Yes", "No"))
#dta_rolling_ave <- dta2 %>%
#  dplyr::arrange(GNISIDNAME,desc(Date)) %>%
#  dplyr::group_by(GNISIDNAME) %>%
#  dplyr::mutate(rollmean_7 = zoo::rollmean(MEAN_cellsml, k = 7, fill = NA, align = "left"),
#                rollmax_7 = zoo::rollmax(MAX_cellsml, k=7, fill =  NA, align = "left")) %>%
#  dplyr::ungroup() %>%
#  dplyr::filter(as.Date(Date) == as.Date(max(dta2$Date)))
#mean_top_10 <- dta_rolling_ave %>%
#  dplyr::arrange(desc(rollmean_7))
#max_top_10 <- dta_rolling_ave %>%
#  dplyr::arrange(desc(rollmax_7)) %>%
#  dplyr::mutate(rollmax_7 = format(round(rollmax_7,0), big.mark=",", scientific=FALSE)) %>%
#  dplyr::select(`Waterbody_GNISID` = GNISIDNAME,
#                `7-Day Max Moving Average` = rollmax_7)
# (2) Date Lookup Table ----
fulldays <- readxl::read_xlsx("./data/calendar-dates.xlsx",
sheet = "calendar-dates") %>%
dplyr::mutate(Date = lubridate::ymd(Date))
lookup.date <- dta %>%
dplyr::group_by(Date, Year, Day) %>%
dplyr::summarise(n=n()) %>%
dplyr::right_join(fulldays, by="Date") %>%
dplyr::rename(Year.dta = Year.x,
Day.dta = Day.x,
Year.fulldays = Year.y,
Day.fulldays = Day.y)
missing.dates <- lookup.date %>%
dplyr::filter(is.na(Day.dta))
# (3) Map: shapefiles ----
lakes.resolvable <- sf::st_read(dsn = "./data/CyAN_Waterbodies.shp",
layer = "CyAN_Waterbodies") %>%
sf::st_zm() %>%
st_transform(crs = 4326) %>%
dplyr::filter(GNISIDNAME %in% dta1$inApp) # filter out saline lakes
state.boundary <- sf::st_read("./data/state_boundary_blm.shp") %>%
st_transform(crs = 4326)
huc6 <- sf::st_read(dsn = "./data/WBD_HU6.shp",layer = "WBD_HU6")%>%
st_transform(crs = 4326)
pal.huc6 <- leaflet::colorFactor(palette = "Paired", domain = unique(sort(huc6$HU_6_NAME)))
# (4) Map: raster ----
# Raster color
thevalues <- c(0,6310,20000,100000,7000000)
#paletteFunc <- grDevices::colorRampPalette(c('#bdbdbd','#66c2a4','#2ca25f','#006d2c'))
#palette     <- paletteFunc(4)
palette <- c('#bdbdbd','#66c2a4','#2ca25f','#006d2c')
pal.map <- leaflet::colorBin(palette = palette,
bins = c(0,6310,20000,100000,7000000),
domain = c(0,6310,20000,100000,7000000),
na.color = "transparent")
# Legend labels
labels = c("Non-detect","Low: 6,311 - 20,000","Moderate: 20,000 - 100,000","High: >100,000")
# ----
#rm(dta1); rm(dta2); rm(dta3)
save.image(file = "data.RData")
source("//deqhq1/WQ-Share/Harmful Algal Blooms Coordination Team/HAB_Shiny_app/data.R")
shiny::runApp()
shiny::runApp()
library(tidyverse)
library(lubridate)
library(readxl)
library(rgdal)
library(sf)
library(raster)
library(leaflet)
library(RColorBrewer)
library(rasterVis)
library(zoo)
shiny::runApp()
shiny::runApp()
install.packages("shiny")
source("//deqhq1/WQ-Share/Harmful Algal Blooms Coordination Team/HAB_Shiny_app/data.R")
shiny::runApp()
runApp()
source("//deqhq1/WQ-Share/Harmful Algal Blooms Coordination Team/HAB_Shiny_app/data.R")
shiny::runApp()
runApp()
shiny::runApp()
source("//deqhq1/WQ-Share/Harmful Algal Blooms Coordination Team/HAB_Shiny_app/data.R")
shiny::runApp()
