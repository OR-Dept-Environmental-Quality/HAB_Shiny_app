# Set up R
# You may need to install the httr package.
# install.packages("httr")
library(httr)
# Set up R
# You may need to install the httr package.
# install.packages("httr")
library(httr)
netrc_path <- "C:/users/ygrund/.netrc"
cookie_path <- "C:/users/ygrund/.urs_cookies"
downloaded_file_path <- "//deqhq1/WQ-Share/Harmful Algal Blooms Coordination Team/Satellite data/CyAN_Data_V5/Sentinel-3/CI_cyano/raw/2024"
# Before using the script
#Set up your ~/.netrc file as listed here: https://wiki.earthdata.nasa.gov/display/EL/How+To+Access+Data+With+cURL+And+Wget
set_config(config(followlocation=1,netrc=1,netrc_file=netrc_path,cookie=cookie_path,cookiefile=cookie_path,cookiejar=cookie_path))
library(httr)
library(dplyr)
# Function to create a custom session for authentication
session <- function(username, password) {
httr::authenticate(username, password)
}
# Define username and password
username <- "ygrund"
password <- "Cosmetic88&&"
# Create the session
my_session <- session(username, password)
dates <- readxl::read_excel("calendar-dates.xlsx")
dates <- readxl::read_excel("./data/calendar-dates.xlsx")
# day_start <- "2016116" # the first day of S3 data
day_start <- "2024054"
day_end <- dates %>% dplyr::filter(as.POSIXlt(Date) == as.POSIXlt(Sys.Date()-1)) %>% dplyr::pull(CyAN_File_NUM)
colnames(dates)
httr::GET(url = "https://oceandata.sci.gsfc.nasa.gov/getfile/L2024053.L3m_DAY_CYAN_CI_cyano_CYAN_CONUS_300m_1_1.tif",
write_disk(downloaded_file_path, overwrite = TRUE))
downloaded_file_path <- "//deqhq1/WQ-Share/Harmful Algal Blooms Coordination Team/Satellite data/CyAN_Data_V5/Sentinel-3/CI_cyano/raw/2024/"
httr::GET(url = "https://oceandata.sci.gsfc.nasa.gov/getfile/L2024053.L3m_DAY_CYAN_CI_cyano_CYAN_CONUS_300m_1_1.tif",
write_disk(downloaded_file_path, overwrite = TRUE))
downloaded_file_path <- "\\\\deqhq1\\WQ-Share\\Harmful Algal Blooms Coordination Team\\Satellite data\\CyAN_Data_V5\\Sentinel-3\\CI_cyano\\raw\\2024\\"
httr::GET(url = "https://oceandata.sci.gsfc.nasa.gov/getfile/L2024053.L3m_DAY_CYAN_CI_cyano_CYAN_CONUS_300m_1_1.tif",
write_disk(downloaded_file_path, overwrite = TRUE))
downloaded_file_path <- "//deqhq1/WQ-Share/Harmful Algal Blooms Coordination Team/Satellite data/CyAN_Data_V5/Sentinel-3/CI_cyano/raw/2024/L2024053.L3m_DAY_CYAN_CI_cyano_CYAN_CONUS_300m_1_1.tif"
httr::GET(url = "https://oceandata.sci.gsfc.nasa.gov/getfile/L2024053.L3m_DAY_CYAN_CI_cyano_CYAN_CONUS_300m_1_1.tif",
write_disk(downloaded_file_path, overwrite = TRUE))
reticulate::repl_python()
from cookielib import CookieJar
import http.cookiejar
from cookielib import CookieJar
import cookielib
import CookieJar
import http.cookiejar
from cookielib import http.cookiejar
import http.cookiejar as cookielib
cookie_jar = http.cookiejar.CookieJar()
from urllib import urlencode
from urllib.parse import urlencode
import urllib2
from urllib.parse import urlparse
from urllib.request import urlopen
username = "ygrund"
password = "Cosmetic88&&"
url = "https://oceandata.sci.gsfc.nasa.gov/getfile/L2024053.L3m_DAY_CYAN_CI_cyano_CYAN_CONUS_300m_1_1.tif"
password_manager = urllib2.HTTPPasswordMgrWithDefaultRealm()
password_manager.add_password(None, "https://urs.earthdata.nasa.gov", username, password)
from urllib.request import HTTPPasswordMgrWithDefaultRealm
password_manager = HTTPPasswordMgrWithDefaultRealm()
password_manager.add_password(None, "https://urs.earthdata.nasa.gov", username, password)
opener = urllib2.build_opener(
urllib2.HTTPBasicAuthHandler(password_manager),
#urllib2.HTTPHandler(debuglevel=1),    # Uncomment these two lines to see
#urllib2.HTTPSHandler(debuglevel=1),   # details of the requests/responses
urllib2.HTTPCookieProcessor(cookie_jar))
opener = build_opener(HTTPBasicAuthHandler(password_manager), HTTPCookieProcessor(cookie_jar))
from urllib.request import build_opener, HTTPBasicAuthHandler, HTTPCookieProcessor
opener = build_opener(HTTPBasicAuthHandler(password_manager), HTTPCookieProcessor(cookie_jar))
build_opener(opener)
from urllib.request import build_opener, HTTPBasicAuthHandler, HTTPCookieProcessor
opener = build_opener(HTTPBasicAuthHandler(password_manager), HTTPCookieProcessor(cookie_jar))
build_opener(opener)
response = opener.open(url)
build_opener(opener).install_opener()
import ssl
ssl_context = ssl.create_default_context()
ssl_context.check_hostname = False
ssl_context.verify_mode = ssl.CERT_NONE
response = opener.open(url, context=ssl_context)
import ssl
from urllib.request import build_opener, HTTPBasicAuthHandler, HTTPCookieProcessor
ssl_context = ssl.create_default_context()
ssl_context.check_hostname = False
ssl_context.verify_mode = ssl.CERT_NONE
opener = build_opener(HTTPBasicAuthHandler(password_manager), HTTPCookieProcessor(cookie_jar), context=ssl_context)
import ssl
from urllib.request import build_opener, HTTPSHandler, HTTPBasicAuthHandler, HTTPCookieProcessor, install_opener
# Create an SSL context with certificate verification disabled
ssl_context = ssl.create_default_context()
ssl_context.check_hostname = False
ssl_context.verify_mode = ssl.CERT_NONE
# Create an opener with handlers for HTTP Basic Authentication and Cookie processing,
# and pass the SSL context to HTTPSHandler
opener = build_opener(HTTPBasicAuthHandler(password_manager), HTTPCookieProcessor(cookie_jar), HTTPSHandler(context=ssl_context))
install_opener(opener)
request = urllib2.Request(url)
response = urllib2.urlopen(request)
import ssl
from urllib.request import build_opener, HTTPSHandler, HTTPBasicAuthHandler, HTTPCookieProcessor, install_opener, Request, urlopen
# Create an SSL context with certificate verification disabled
ssl_context = ssl.create_default_context()
ssl_context.check_hostname = False
ssl_context.verify_mode = ssl.CERT_NONE
# Create an opener with handlers for HTTP Basic Authentication and Cookie processing,
# and pass the SSL context to HTTPSHandler
opener = build_opener(HTTPBasicAuthHandler(password_manager), HTTPCookieProcessor(cookie_jar), HTTPSHandler(context=ssl_context))
# Install the opener globally
install_opener(opener)
# Now you can create a request object and open it with urlopen
request = Request(url)
response = urlopen(request)
body = response.read()
print body
print(body)
import requests # get the requsts library from https://github.com/requests/requests
import requests # get the requsts library from https://github.com/requests/requests
quit
library(arcgisbinding)
library(dplyr)
arc.check_product()
Sys.setenv(RETICULATE_PYTHON = "C:\\Program Files\\ArcGIS\\Pro\\bin\\Python\\envs\\arcgispro-py3\\python.exe")
library(reticulate)
reticulate::repl_python()
import sys
import requests # get the requsts library from https://github.com/requests/requests
quit
Sys.setenv(RETICULATE_PYTHON = "C:\\Program Files\\ArcGIS\\Pro\\bin\\Python\\envs\\arcgispro-py3\\python.exe")
# Load the reticulate library
library(reticulate)
# Install the requests library
py_install("requests")
reticulate::repl_python()
import requests # get the requsts library from https://github.com/requests/requests
import requests # get the requsts library from https://github.com/requests/requests
quit
py_config()
quit
py_config()
Sys.setenv(RETICULATE_PYTHON = "C:\\Program Files\\ArcGIS\\Pro\\bin\\Python\\envs\\arcgispro-py3\\python.exe")
py_config()
Sys.setenv(RETICULATE_PYTHON = "C:\\Program Files\\ArcGIS\\Pro\\bin\\Python\\envs\\arcgispro-py3\\python.exe")
# Load the reticulate library
library(reticulate)
# Install the requests library
py_install("requests")
py_config()
reticulate::repl_python()
import sys
import requests # get the requsts library from https://github.com/requests/requests
quit
day_start <- "2024054"
day_start <- "2024054"
library(httr)
library(dplyr)
# Function to create a custom session for authentication
session <- function(username, password) {
httr::authenticate(username, password)
}
# Function to create a custom session for authentication
session <- function(username, password) {
httr::authenticate(username, password)
}
# Define username and password
username <- "ygrund"
# Function to create a custom session for authentication
session <- function(username, password) {
httr::authenticate(username, password)
}
# Define username and password
username <- "ygrund"
password <- "Cosmetic88&&"
# Function to create a custom session for authentication
session <- function(username, password) {
httr::authenticate(username, password)
}
# Define username and password
username <- "ygrund"
password <- "Cosmetic88&&"
# Create the session
my_session <- session(username, password)
password <- "Cosmetic88&&"
# Create the session
my_session <- session(username, password)
dates <- readxl::read_excel("calendar-dates.xlsx")
