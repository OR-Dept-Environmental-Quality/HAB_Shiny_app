'))),
# _ Header ----
shinydashboard::box(
width = 12,
solidHeader = TRUE,
tags$img(src = "DEQ-logo-color-horizontal370x73.png"),
tags$div(span("Satellite Imagery of Cyanobacteria in Oregon Lakes and Reservoirs",
style = "color: black; font-size: 40px"))
,
tags$div(span(HTML(paste0("Last sourced from the ",
a("U.S. EPA CyAN Project",
href="https://www.epa.gov/water-research/cyanobacteria-assessment-network-cyan"),
" on: ",
max(dta$Date))),
style = "color: black; font-size: 20px"))
#tags$br(),
#,
#tags$div(span(HTML(paste0("A Map Application for cyanobacteria blooms from the ",
#                          a("U.S. EPA CyAN Project",
#                            href="https://www.epa.gov/water-research/cyanobacteria-assessment-network-cyan"))),
#              style = "color: black; font-size: 20px")),
#tags$br(),
), # Header box END
# _ Part 1: Mapping data ----
shinydashboardPlus::box(
width = 12,
#title = "Mapping Data",
status = "primary",
solidHeader = FALSE,
collapsible = FALSE,
collapsed = FALSE,
#dropdownMenu = boxDropdown(),
shinydashboard::box(
width = 3,
#title = "date_and_waterbody",
solidHeader = TRUE,
# __ Select a Date ----
#tags$style(HTML(".datepicker {z-index:99999 !important;}")),
shiny::dateInput(inputId = "date_map",
label = tags$h4("Select a Date:"),
value = max(dta$Date),
min = min(dta$Date),
max = max(dta$Date),
format = "yyyy-mm-dd",
startview = "month",
weekstart = 0,
datesdisabled = missing.dates$Date),
# __ Max 7D Means ----
uiOutput("top10"),
#tags$hr(),
# __ Select a Basin ----
shinyWidgets::pickerInput(inputId = "basin",
label = tags$h4("Select a Basin:"),
choices = list(
"Oregon",
"HUC6 Basin" = unique(sort(huc6@data$HU_6_NAME))
),
multiple = FALSE),
#tags$hr(),
# __ Select a Waterbody ----
shinyWidgets::pickerInput(inputId = "waterbody",
label = tags$h4("Select a Waterbody:"),
choices = list(
"Oregon",
"Waterbody Name_GNISID" = unique(sort(lakes.resolvable$GNISIDNAME))
),
multiple = FALSE),
shiny::textOutput("dw"),
tags$hr(),
# __ Boxplot ----
library(tidyverse)
library(lubridate)
library(readxl)
library(rgdal)
library(sf)
library(raster)
library(leaflet)
library(RColorBrewer)
shiny::runApp()
install.packages(c("broom", "cli", "colorspace", "cpp11", "curl", "dplyr", "ggplot2", "mime", "plotly", "proxy", "raster", "rmarkdown", "sf", "stringi", "terra", "units", "waiter", "xfun"))
shiny::runApp()
runApp()
shiny::runApp()
source('//deqhq1/WQ-Share/Harmful Algal Blooms Coordination Team/HAB_Shiny_app/data.R')
shiny::runApp()
shiny::runApp()
shiny::runApp()
install.packages(c("colorspace", "gargle"))
shiny::runApp()
install.packages("shiny")
shiny::runApp()
install.packages("raster")
shiny::runApp()
shiny::runApp()
library(tidyverse)
library(lubridate)
library(readxl)
library(rgdal)
library(sf)
library(raster)
library(leaflet)
library(RColorBrewer)
library(rasterVis)
library(zoo)
# (1) Map: shapefile ----
lakes.resolvable <- rgdal::readOGR(dsn = "./data/NHDwaterbody_resolvable_lakes_dissolved_oregon_clean_huc6.shp",
layer = "NHDwaterbody_resolvable_lakes_dissolved_oregon_clean_huc6")
state.boundary <- sf::st_read("./data/state_boundary_blm.shp") %>%
st_transform(crs="+init=epsg:4326")
huc6 <- rgdal::readOGR(dsn = "./data/WBD_HU6.shp",layer = "WBD_HU6")
pal.huc6 <- leaflet::colorFactor(palette = "Paired", domain = unique(sort(huc6@data$HU_6_NAME)))
# (2) Plot and Table ----
dta1 <- readxl::read_xlsx("./data/HAB_resolvablelakes_2016_2020.xlsx",
sheet = "HAB_resolvablelakes_2016_2020")%>%
dplyr::filter(!GNISIDNAME == "Goose Lake_01520146") %>% # located in the WA state
dplyr::filter(GNISIDNAME %in% unique(sort(lakes.resolvable@data$GNISIDNAME)))
dta2 <- readxl::read_xlsx("./data/HAB_resolvablelakes_2021.xlsx",
sheet = "HAB_resolvable_lake_data")%>%
dplyr::filter(!GNISIDNAME == "Goose Lake_01520146") %>% # located in the WA state
dplyr::filter(GNISIDNAME %in% unique(sort(lakes.resolvable@data$GNISIDNAME)))
dta3 <- readxl::read_xlsx("./data/Resolvable_Lakes.xlsx",
sheet = "cyan_resolvable_lakes")
GNISNameID <- unique(sort(dta3$wi_DWSA))
dta <- rbind(dta1,dta2) %>%
dplyr::rename(Mean = MEAN_cellsml,
Maximum = MAX_cellsml,
Minimum = MIN_cellsml) %>%
tidyr::gather(`Summary Statistics`, `Cyanobacteria (cells/mL)`, -GNISIDNAME,-COUNT,-AREA,-PercentArea_Value, -Day,-Year,-Date) %>%
tidyr::separate(GNISIDNAME,c("GNISNAME","GNISID"), sep="_") %>%
dplyr::mutate(GNISIDNAME = paste0(GNISNAME,"_",GNISID)) %>%
dplyr::mutate(Date = lubridate::ymd(Date)) %>%
dplyr::arrange(desc(Date)) %>%
dplyr::mutate(wi_DWSA = ifelse(GNISIDNAME %in% GNISNameID, "Yes", "No"))
#dta_rolling_ave <- dta2 %>%
#  dplyr::arrange(GNISIDNAME,desc(Date)) %>%
shiny::runApp()
source('//deqhq1/WQ-Share/Harmful Algal Blooms Coordination Team/HAB_Shiny_app/data.R')
shiny::runApp()
library(ggplot2)
library(scales)
library(lubridate)
library(zoo)
Odell_2019 <- read.csv(paste0(dir, "Odell_2019.csv"))
# Load packages----
library(tidyverse)
# Load Previous csv files----
#dir <- "T:\\TMDL_ER\\Upper Deschutes HABs Project\\Upper Deschutes 2021\\Odell_2019_2021\\"
dir <- "\\\\Deqhq1\\tmdl\\TMDL_ER\\Upper Deschutes HABs Project\\Upper Deschutes 2021\\Odell_2019_2021\\" # global path
Odell_2019$DATETIME <- as.POSIXct(Odell_2019$DATETIME)
# Load packages----
library(tidyverse)
library(ggplot2)
library(scales)
library(lubridate)
library(zoo)
# Load Previous csv files----
#dir <- "T:\\TMDL_ER\\Upper Deschutes HABs Project\\Upper Deschutes 2021\\Odell_2019_2021\\"
dir <- "\\\\Deqhq1\\tmdl\\TMDL_ER\\Upper Deschutes HABs Project\\Upper Deschutes 2021\\Odell_2019_2021\\" # global path
Odell_2019 <- read.csv(paste0(dir, "Odell_2019.csv"))
Odell_2019$DATETIME <- as.POSIXct(Odell_2019$DATETIME)
Odell_2019 <- Odell_2019 %>%
select("DATETIME" = DATETIME, "BGA" = BGA.PC.RFU, "pH" = pH, "DO_sat" = ODO...local, "Chla" = Chlorophyll.ug.L, "Temp" = Temp..C)
Odell_2020 <- read.csv(paste0(dir, "Odell_2020.csv"))
Odell_2020$DATETIME <- as.POSIXct(Odell_2020$DATETIME)
Odell_2020 <- Odell_2020 %>%
select("DATETIME" = DATETIME, "BGA" = BGA.PC.RFU, "pH" = pH, "DO_sat" = ODO...local, "Chla" = Chlorophyll.ug.L, "Temp" = Temp..C)
Odell_2021 <- read.delim("\\\\deqlab1\\wqm\\Telemetry\\25509_OdellSunsetCove\\OSC_15_Min.dat",
sep = ",",
header = T,
skip = 1,
stringsAsFactors = F)
# Get rid of filler rows
Odell_2021 <- Odell_2021[-1:-2,]
# Convert data to right types
Odell_2021$DATETIME <- as.POSIXct(Odell_2021$TIMESTAMP) # Time format
Odell_2021[, 2:18] <- sapply(Odell_2021[, 2:18], as.numeric)
Odell_2021 <- Odell_2021 %>%
select("DATETIME" = DATETIME, "BGA" = BGA_RFU, "pH" = pH, "DO_sat" = Do.Sat, "Chla" = ChlorophyllugL, "Temp" = WTemp)
# Assemble one data-----
Odell <- bind_rows(Odell_2019, Odell_2020, Odell_2021)
Odell <- na.omit(Odell)
Odell$Day <- strftime(Odell$DATETIME, format = '%j')
Odell$Year <- strftime(Odell$DATETIME, format = '%Y')
# Summarize values by day-----
Odell.summary <- Odell %>%
group_by(Year, Day) %>%
summarize(min_temp = min(Temp, na.rm = T),
min_DO = min(DO_sat, na.rm = T),
max_pH = max(pH, na.rm = T),
max_chla = max(Chla),
max_BGA = max(BGA))
# Plots----
BGA.plot <- ggplot(data = Odell.summary, aes(as.numeric(Day),
max_BGA,
group = factor(Year),
color = factor(Year))) +
geom_point(size = 2) +
xlab("Julian Day") +
ylab("Maximum Daily Phycocyanin (Relative Fluorescence)") +
theme_bw() +
scale_color_manual(values = c("green1", "darkgreen", "blue"), guide = guide_legend(title = NULL))
BGA.plot
source('//deqhq1/WQ-Share/Harmful Algal Blooms Coordination Team/HAB_Shiny_app/data.R')
shiny::runApp()
# June 29, 2021
# Comparison of real time Odell Lake data with historical data
# Dan Sobota, Oregon DEQ, daniel.sobota@deq.state.or.us
# Load packages----
library(tidyverse)
library(ggplot2)
library(scales)
library(lubridate)
library(zoo)
# Load Previous csv files----
#dir <- "T:\\TMDL_ER\\Upper Deschutes HABs Project\\Upper Deschutes 2021\\Odell_2019_2021\\"
dir <- "\\\\Deqhq1\\tmdl\\TMDL_ER\\Upper Deschutes HABs Project\\Upper Deschutes 2021\\Odell_2019_2021\\" # global path
Odell_2019 <- read.csv(paste0(dir, "Odell_2019.csv"))
Odell_2019$DATETIME <- as.POSIXct(Odell_2019$DATETIME)
Odell_2019 <- Odell_2019 %>%
select("DATETIME" = DATETIME, "BGA" = BGA.PC.RFU, "pH" = pH, "DO_sat" = ODO...local, "Chla" = Chlorophyll.ug.L, "Temp" = Temp..C)
Odell_2020 <- read.csv(paste0(dir, "Odell_2020.csv"))
Odell_2020$DATETIME <- as.POSIXct(Odell_2020$DATETIME)
Odell_2020 <- Odell_2020 %>%
select("DATETIME" = DATETIME, "BGA" = BGA.PC.RFU, "pH" = pH, "DO_sat" = ODO...local, "Chla" = Chlorophyll.ug.L, "Temp" = Temp..C)
Odell_2021 <- read.delim("\\\\deqlab1\\wqm\\Telemetry\\25509_OdellSunsetCove\\OSC_15_Min.dat",
sep = ",",
header = T,
skip = 1,
stringsAsFactors = F)
# Get rid of filler rows
Odell_2021 <- Odell_2021[-1:-2,]
# Convert data to right types
Odell_2021$DATETIME <- as.POSIXct(Odell_2021$TIMESTAMP) # Time format
Odell_2021[, 2:18] <- sapply(Odell_2021[, 2:18], as.numeric)
Odell_2021 <- Odell_2021 %>%
select("DATETIME" = DATETIME, "BGA" = BGA_RFU, "pH" = pH, "DO_sat" = Do.Sat, "Chla" = ChlorophyllugL, "Temp" = WTemp)
# Assemble one data-----
Odell <- bind_rows(Odell_2019, Odell_2020, Odell_2021)
Odell <- na.omit(Odell)
Odell$Day <- strftime(Odell$DATETIME, format = '%j')
Odell$Year <- strftime(Odell$DATETIME, format = '%Y')
# Summarize values by day-----
Odell.summary <- Odell %>%
group_by(Year, Day) %>%
summarize(min_temp = min(Temp, na.rm = T),
min_DO = min(DO_sat, na.rm = T),
max_pH = max(pH, na.rm = T),
max_chla = max(Chla),
max_BGA = max(BGA))
