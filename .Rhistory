print("...Tabulate Area")
tabulate_result = arcpy.sa.TabulateArea(
in_zone_data=zones,
zone_field="GNISIDNAME",
in_class_data=raw_tif_int, # Use raw_tif_int (instead of outSetNull_clip) to include 254 & 255
class_field="Value",
out_table=temp_tabulate  # Use the temporary table path
)
print("...Add date")
if "Date" not in [f.name for f in arcpy.ListFields(temp_tabulate)]:
arcpy.AddField_management(temp_tabulate, "Date", "TEXT")
with arcpy.da.UpdateCursor(temp_tabulate, ["Date"]) as cursor:
for row in cursor:
row[0] = raw_name[1:]  # Remove the first character "L" from raw_name
cursor.updateRow(row)
print("...Convert tabulate result to dataframe and append to the final dataframe")
tabulate_df = pd.DataFrame(arcpy.da.TableToNumPyArray(tabulate_result, '*'))
if "OID" in tabulate_df.columns:
tabulate_df = tabulate_df.drop(columns=['OID'])
tabulate_result_df = pd.concat([tabulate_result_df, tabulate_df], ignore_index=True)
print("...Zonal Statistics")
arcpy.sa.ZonalStatisticsAsTable(
in_zone_data=zones,
zone_field="GNISIDNAME",
in_value_raster=outCellsML,
out_table=temp_zonal,
ignore_nodata="DATA",
statistics_type="ALL",
process_as_multidimensional="CURRENT_SLICE",
percentile_values=[100],
percentile_interpolation_type="AUTO_DETECT",
circular_calculation="ARITHMETIC",
circular_wrap_value=360,
out_join_layer=None
)
print("...Add date")
if "Date" not in [f.name for f in arcpy.ListFields(temp_zonal)]:
arcpy.AddField_management(temp_zonal, "Date", "TEXT")
with arcpy.da.UpdateCursor(temp_zonal, ["Date"]) as cursor:
for row in cursor:
row[0] = raw_name[1:]  # Remove the first character "L" from raw_name
cursor.updateRow(row)
print("...Convert zonal statistics result to dataframe and append to the final dataframe")
zonal_df = pd.DataFrame(arcpy.da.TableToNumPyArray(temp_zonal, '*'))
if "OID" in zonal_df.columns:
zonal_df = zonal_df.drop(columns=['OID'])
zonal_result_df = pd.concat([zonal_result_df, zonal_df], ignore_index=True)
print("...Save intermediate results to CSV after each raw_name")
tabulate_result_df.to_csv(os.path.join(temp_dir, f"tabulate_result_{raw_name}.csv"), index=False)
zonal_result_df.to_csv(os.path.join(temp_dir, f"zonal_result_{raw_name}.csv"), index=False)
print("...Clear dataframes for the next iteration")
tabulate_result_df = pd.DataFrame(dtype='object')
zonal_result_df = pd.DataFrame(dtype='object')
except arcpy.ExecuteError:
print("Raster contains only null values (254 and 255). Skipping further processing for this raster.")
continue
quit
library(dplyr)
library(readr)
# Set the directory where your CSV files are located
folder_path <- "//deqhq1/WQ-Share/Harmful Algal Blooms Coordination Team/Satellite data/CyAN_Data_V5/Sentinel-3/CI_cyano/temp/"
# List all CSV files with names starting with "tabulate_result_"
csv_files <- list.files(folder_path, pattern = "tabulate_result_.*\\.csv$", full.names = TRUE)
# Initialize an empty list to store the data frames
all_data <- list()
# Read each CSV file and store them in the list
for (file in csv_files) {
print(file)
# Attempt to read the CSV file
result <- tryCatch({
read_csv(file)
}, error = function(e) {
warning(paste("Error reading file:", file, "- Skipping this file"))
NULL
})
# If reading was successful, add the data frame to the list
if (!is.null(result)) {
# Ensure GNISIDNAME column is character type
if ("GNISIDNAME" %in% names(result) && !is.character(result$GNISIDNAME)) {
result$GNISIDNAME <- as.character(result$GNISIDNAME)
}
all_data[[file]] <- result
}
}
# Combine all data frames into one
combined_df <- bind_rows(all_data)
combined_df <- lapply(combined_df, function(df) {
# Ensure GNISIDNAME column is character type
if ("GNISIDNAME" %in% names(df) && !is.character(df$GNISIDNAME)) {
df$GNISIDNAME <- as.character(df$GNISIDNAME)
}
# Add other checks for converting other columns if needed
return(df)
})
combined_df
# Combine all data frames into one
combined_df <- bind_rows(all_data)
# Convert columns to the appropriate types for each data frame
all_data <- lapply(all_data, function(df) {
# Convert character columns to character type
df[sapply(df, is.character)] <- lapply(df[sapply(df, is.character)], as.character)
# Convert logical columns to integer type
df[sapply(df, is.logical)] <- lapply(df[sapply(df, is.logical)], as.integer)
# Add other checks for converting other column types if needed
return(df)
})
# Combine all data frames into one
combined_df <- bind_rows(all_data)
all_data <- lapply(all_data, function(df) {
# Convert character columns to character type
df[sapply(df, is.character)] <- lapply(df[sapply(df, is.character)], as.character)
# Convert logical columns to integer type
df[sapply(df, is.logical)] <- lapply(df[sapply(df, is.logical)], as.integer)
# Convert double columns to numeric type
df[sapply(df, is.double)] <- lapply(df[sapply(df, is.double)], as.numeric)
# Add other checks for converting other column types if needed
return(df)
})
# Combine all data frames into one
combined_df <- bind_rows(all_data)
all_data <- lapply(all_data, function(df) {
# Convert character columns to character type
df[sapply(df, is.character)] <- lapply(df[sapply(df, is.character)], as.character)
# Convert logical columns to integer type
df[sapply(df, is.logical)] <- lapply(df[sapply(df, is.logical)], as.character)
# Convert double columns to numeric type
df[sapply(df, is.double)] <- lapply(df[sapply(df, is.double)], as.character)
# Add other checks for converting other column types if needed
return(df)
})
# Combine all data frames into one
combined_df <- bind_rows(all_data)
# Convert columns to the appropriate types for each data frame
all_data <- lapply(all_data, function(df) {
df[sapply(df, is.character)] <- lapply(df[sapply(df, is.character)], as.character)
df[sapply(df, is.logical)] <- lapply(df[sapply(df, is.logical)], as.character)
df[sapply(df, is.double)] <- lapply(df[sapply(df, is.double)], as.character)
df[sapply(df, is.integer)] <- lapply(df[sapply(df, is.integer)], as.character)
return(df)
})
# Combine all data frames into one
combined_df <- bind_rows(all_data)
# Write the combined data to a big CSV file
write.csv(combined_df, file = "//deqhq1/WQ-Share/Harmful Algal Blooms Coordination Team/Satellite data/CyAN_Data_V5/Sentinel-3/CI_cyano/tabulate_results.csv", row.names = FALSE)
library(dplyr)
library(readr)
# ----
tabulate_results <- read.csv("//deqhq1/WQ-Share/Harmful Algal Blooms Coordination Team/Satellite data/CyAN_Data_V5/Sentinel-3/CI_cyano/tabulate_results.csv")
tabulate_results_filter <- tabulate_results %>% dplyr::filter(rowSums(!is.na(select(., c("Value_254", "Value_255")))) != 2)
colnames(tabulate_results)
tabulate_results_filter <- tabulate_results %>% dplyr::filter(rowSums(!is.na(select(., c("VALUE_254", "VALUE_255")))) != 2)
tabulate_results_filter <- tabulate_results %>% dplyr::filter(rowSums(!is.na(select(., starts_with("VALUE_")))) > 2)
tabulate_results_filter <- tabulate_results %>% dplyr::filter(!is.na(select(., VALUE_0:VALUE_253)))
tabulate_results_filter <- tabulate_results %>% dplyr::filter(rowSums(!is.na(select(., VALUE_0:VALUE_253))) == 254)
write.csv(tabulate_results_filter, file = "//deqhq1/WQ-Share/Harmful Algal Blooms Coordination Team/Satellite data/CyAN_Data_V5/Sentinel-3/CI_cyano/tabulate_results_filter.csv", row.names = FALSE)
colnames(tabulate_results)
tabulate_results_filter <- tabulate_results %>% dplyr::select(GNISIDNAME, Date, VALUE_0:VALUE_255)
colnames(tabulate_results_filter)
ncol(tabulate_results_filter)
colnames(tabulate_results_filter)
# ----
resolvable_lakes <- readxl::read_excel("./data/Resolvable_Lakes.xlsx")
colnames(resolvable_lakes)
head(resolvable_lakes)
unique(resolvable_lakes$GNIS_Name_ID)
tabulate_results_filter <- tabulate_results %>%
dplyr::select(GNISIDNAME, Date, VALUE_0:VALUE_255) %>%
dplyr::left_join(resolvable_lakes, by=c("GNIS_Name_ID"="GNISIDNAME"))
tabulate_results_filter <- tabulate_results %>%
dplyr::select(GNISIDNAME, Date, VALUE_0:VALUE_255) %>%
dplyr::left_join(resolvable_lakes, by=c("GNISIDNAME"="GNIS_Name_ID"))
tabulate_results_filter <- tabulate_results %>%
dplyr::select(GNISIDNAME, Date, VALUE_0:VALUE_255) %>%
dplyr::left_join(resolvable_lakes, by=c("GNISIDNAME"="GNIS_Name_ID")) %>%
dplyr::mutate(Cell_counts_above_detection = sum(VALUE_1:VALUE_252))
dplyr::mutate(Cell_counts_above_detection = sum((select(., VALUE_1:VALUE_253)))
tabulate_results_filter <- tabulate_results %>%
tabulate_results_filter <- tabulate_results %>%
dplyr::select(GNISIDNAME, Date, VALUE_0:VALUE_255) %>%
dplyr::left_join(resolvable_lakes, by=c("GNISIDNAME"="GNIS_Name_ID")) %>%
dplyr::mutate(Cell_counts_above_detection = sum((select(., VALUE_1:VALUE_253))))
tabulate_results_filter <- tabulate_results %>%
dplyr::select(GNISIDNAME, Date, VALUE_0:VALUE_255) %>%
dplyr::left_join(resolvable_lakes, by=c("GNISIDNAME"="GNIS_Name_ID")) %>%
dplyr::mutate(Cell_counts_above_detection = sum((select(., VALUE_1:VALUE_252))))
head(tabulate_results_filter$Cell_counts_above_detection)
head(tabulate_results_filter)
tabulate_results_filter <- tabulate_results %>%
dplyr::select(GNISIDNAME, Date, VALUE_0:VALUE_255) %>%
dplyr::left_join(resolvable_lakes, by=c("GNISIDNAME"="GNIS_Name_ID")) %>%
dplyr::mutate(Cell_counts_above_detection = sum((select(., VALUE_1:VALUE_252)))/90000)
colnames(tabulate_results_filter)
tabulate_results_filter <- tabulate_results %>%
dplyr::select(GNISIDNAME, Date, VALUE_0:VALUE_255) %>%
dplyr::left_join(resolvable_lakes, by=c("GNISIDNAME"="GNIS_Name_ID")) %>%
dplyr::mutate(Cell_counts_above_detection = sum((select(., VALUE_1:VALUE_252)))/90000) %>%
dplyr::mutate(Frequency = Cell_counts_above_detection/(Area_Total_Cells-VALUE_255/90000))
?average
tabulate_results_filter <- tabulate_results %>%
dplyr::select(GNISIDNAME, Date, VALUE_0:VALUE_255) %>%
dplyr::left_join(resolvable_lakes, by=c("GNISIDNAME"="GNIS_Name_ID")) %>%
dplyr::mutate(Cell_counts_above_detection = sum((select(., VALUE_1:VALUE_252)))/90000) %>%
dplyr::mutate(Frequency = Cell_counts_above_detection/(Area_Total_Cells-VALUE_255/90000)) %>%
dplyr::mutate(Mean_CI = sum(across(starts_with("VALUE_"), ~ . * as.numeric(gsub("VALUE_", "", cur_column()))))/sum(select(., VALUE_0:VALUE_252)))
tabulate_results_filter$Mean_CI
range(tabulate_results_filter$Mean_CI)
tabulate_results_filter <- tabulate_results %>%
dplyr::select(GNISIDNAME, Date, VALUE_0:VALUE_255) %>%
dplyr::left_join(resolvable_lakes, by=c("GNISIDNAME"="GNIS_Name_ID")) %>%
dplyr::mutate(Cell_counts_above_detection = sum((select(., VALUE_1:VALUE_252)))/90000) %>%
dplyr::mutate(Frequency = Cell_counts_above_detection/(Area_Total_Cells-VALUE_255/90000)) %>%
dplyr::mutate(Mean_CI = 1/sum(select(., VALUE_0:VALUE_252)))
range(tabulate_results_filter$Mean_CI)
range(tabulate_results_filter$Cell_counts_above_detection)
# Zonal -----
# Set the directory where your CSV files are located
folder_path <- "//deqhq1/WQ-Share/Harmful Algal Blooms Coordination Team/Satellite data/CyAN_Data_V5/Sentinel-3/CI_cyano/temp/"
# List all CSV files with names starting with "zonal_result_"
csv_files <- list.files(folder_path, pattern = "zonal_result_.*\\.csv$", full.names = TRUE)
# Zonal -----
# Set the directory where your CSV files are located
folder_path <- "//deqhq1/WQ-Share/Harmful Algal Blooms Coordination Team/Satellite data/CyAN_Data_V5/Sentinel-3/CI_cyano/temp/"
# List all CSV files with names starting with "zonal_result_"
csv_files <- list.files(folder_path, pattern = "zonal_result_.*\\.csv$", full.names = TRUE)
# Define the path for the big CSV file
zonal_results <- "//deqhq1/WQ-Share/Harmful Algal Blooms Coordination Team/Satellite data/CyAN_Data_V5/Sentinel-3/CI_cyano/zonal_results.csv"
# Initialize a connection to the big CSV file
connection <- file(zonal_results, open = "w")
# Initialize a connection to the big CSV file
csv_conn <- file(zonal_results, open = "w")
# Zonal -----
# Set the directory where your CSV files are located
folder_path <- "//deqhq1/WQ-Share/Harmful Algal Blooms Coordination Team/Satellite data/CyAN_Data_V5/Sentinel-3/CI_cyano/temp/"
# List all CSV files with names starting with "zonal_result_"
csv_files <- list.files(folder_path, pattern = "zonal_result_.*\\.csv$", full.names = TRUE)
# Define the path for the big CSV file
zonal_results <- "//deqhq1/WQ-Share/Harmful Algal Blooms Coordination Team/Satellite data/CyAN_Data_V5/Sentinel-3/CI_cyano/zonal_results.csv"
# Initialize a connection to the big CSV file
final_csv_conn <- file(zonal_results, open = "w")
# Loop through each CSV file and write its content to the big CSV file
for (file in csv_files) {
# Open the current CSV file
csv_conn <- file(file, open = "r")
# Copy the content of the current CSV file to the big CSV file
while (length(line <- readLines(csv_conn, n = 1)) > 0) {
writeLines(line, final_csv_conn)
}
# Close the current CSV file
close(csv_conn)
}
# Close the current CSV file
close(csv_conn)
# Close the big CSV file
close(final_csv_conn)
# Close the big CSV file
close(final_csv_conn)
final_csv_conn
# Initialize a connection to the big CSV file
final_csv_conn <- file(zonal_results, open = "w")
# Close the big CSV file
close(final_csv_conn)
close(csv_conn)
# Zonal -----
# Set the directory where your CSV files are located
folder_path <- "//deqhq1/WQ-Share/Harmful Algal Blooms Coordination Team/Satellite data/CyAN_Data_V5/Sentinel-3/CI_cyano/temp/"
# List all CSV files with names starting with "zonal_result_"
csv_files <- list.files(folder_path, pattern = "zonal_result_.*\\.csv$", full.names = TRUE)
# Define the path for the big CSV file
zonal_results <- "//deqhq1/WQ-Share/Harmful Algal Blooms Coordination Team/Satellite data/CyAN_Data_V5/Sentinel-3/CI_cyano/zonal_results.csv"
# Initialize a connection to the big CSV file
final_csv_conn <- file(zonal_results, open = "w")
# Loop through each CSV file and write its content to the big CSV file
for (file in csv_files) {
print(file)
# Open the current CSV file
csv_conn <- file(file, open = "r")
# Copy the content of the current CSV file to the big CSV file
while (length(line <- readLines(csv_conn, n = 1)) > 0) {
writeLines(line, final_csv_conn)
}
# Close the current CSV file
close(csv_conn)
}
# Close the big CSV file
close(final_csv_conn)
# Close the final CSV file
close(final_csv_conn)
# Close the final CSV file
fclose(final_csv_conn)
# Close the final CSV file
close(final_csv_conn)
# Initialize a connection to the big CSV file
final_csv_conn <- file(zonal_results, open = "w")
# Close the final CSV file
close(final_csv_conn)
# Close the final CSV file
close(final_csv_conn)
# Close the final CSV file
close(final_csv_conn)
# Initialize a connection to the big CSV file
final_csv_conn <- file(zonal_results, open = "w")
# Close the final CSV file
close(final_csv_conn)
# Tabulate ----
library(dplyr)
# Zonal -----
# Set the directory where your CSV files are located
folder_path <- "//deqhq1/WQ-Share/Harmful Algal Blooms Coordination Team/Satellite data/CyAN_Data_V5/Sentinel-3/CI_cyano/temp/"
# List all CSV files with names starting with "zonal_result_"
csv_files <- list.files(folder_path, pattern = "zonal_result_.*\\.csv$", full.names = TRUE)
# Define the path for the big CSV file
zonal_results <- "//deqhq1/WQ-Share/Harmful Algal Blooms Coordination Team/Satellite data/CyAN_Data_V5/Sentinel-3/CI_cyano/zonal_results.csv"
# Initialize a connection to the big CSV file
final_csv_conn <- file(zonal_results, open = "w")
# Flag to skip the first line (header)
first_line <- TRUE
# Zonal -----
# Set the directory where your CSV files are located
folder_path <- "//deqhq1/WQ-Share/Harmful Algal Blooms Coordination Team/Satellite data/CyAN_Data_V5/Sentinel-3/CI_cyano/temp/"
# List all CSV files with names starting with "zonal_result_"
csv_files <- list.files(folder_path, pattern = "zonal_result_.*\\.csv$", full.names = TRUE)
# Define the path for the big CSV file
zonal_results <- "//deqhq1/WQ-Share/Harmful Algal Blooms Coordination Team/Satellite data/CyAN_Data_V5/Sentinel-3/CI_cyano/zonal_results.csv"
# Initialize a list to store the data frames
all_data <- list()
# Loop through each CSV file and read its content into a data frame
for (file in csv_files) {
print(file)
data <- read.csv(file)
all_data[[file]] <- data
}
# Combine all data frames into one
combined_df <- bind_rows(all_data)
# Loop through each CSV file and read its content into a data frame
for (file in csv_files) {
print(file)
data <- read.csv(file)
# Ensure GNISIDNAME column is character type
if ("GNISIDNAME" %in% names(data) && !is.character(data$GNISIDNAME)) {
data$GNISIDNAME <- as.character(data$GNISIDNAME)
}
all_data[[file]] <- data
}
# Combine all data frames into one
combined_df <- bind_rows(all_data)
# Write the combined data frame to the final CSV file
write.csv(combined_df, zonal_results, row.names = FALSE)
zonl_results_final <- readxl::read_excel(zonal_results)
zonl_results_final <- read.csv(zonal_results)
View(zonl_results_final)
# ---
dates <- readxl::read_excel("./data/calendar-dates.xlsx")
View(dates)
colnames(dates)
colnames(zonl_results_final)
zonal_results_filter <- zonl_results_final %>%
dplyr::left_join(dates, by=c("CyAN_File_NUM"="Date"))
zonal_results_filter <- zonl_results_final %>%
dplyr::left_join(dates, by=c("Date"="CyAN_File_NUM"))
zonal_results_filter <- zonl_results_final %>%
dplyr::left_join(dates, by=c(as.character(Date)="CyAN_File_NUM"))
zonal_results_filter <- zonl_results_final %>%
dplyr::mutate(Date = as.character(Date)) %>%
dplyr::left_join(dates, by=c("Date"="CyAN_File_NUM"))
View(zonal_results_filter)
colnames(zonal_results_filter)
View(zonal_results_filter)
resolvable_lakes <- readxl::read_excel("./data/Resolvable_Lakes.xlsx")
zonal_results_filter <- zonl_results_final %>%
dplyr::left_join(resolvable_lakes, by=c("GNISIDNAME"="GNIS_Name_ID")) %>%
dplyr::mutate(Date = as.character(Date)) %>%
dplyr::left_join(dates, by=c("Date"="CyAN_File_NUM")) %>% # will be "CyAN_File_NUM" only in new script
dplyr::mutate(Month = month(Date.y)) %>%
dplyr::select(GNISIDNAME,MIN,MAX,MEAN,STD,MEDIAN,Date.y,Year,TEXT_Day)
zonal_results_filter <- zonl_results_final %>%
dplyr::left_join(resolvable_lakes, by=c("GNISIDNAME"="GNIS_Name_ID")) %>%
dplyr::mutate(Date = as.character(Date)) %>%
dplyr::left_join(dates, by=c("Date"="CyAN_File_NUM")) %>% # will be "CyAN_File_NUM" only in new script
dplyr::mutate(Month = lubridate::month(Date.y)) %>%
dplyr::select(GNISIDNAME,MIN,MAX,MEAN,STD,MEDIAN,Date.y,Year,TEXT_Day)
colnames(resolvable_lakes)
zonal_results_filter <- zonl_results_final %>%
dplyr::left_join(resolvable_lakes, by=c("GNISIDNAME"="GNIS_Name_ID")) %>%
dplyr::mutate(Date = as.character(Date)) %>%
dplyr::left_join(dates, by=c("Date"="CyAN_File_NUM")) %>% # will be "CyAN_File_NUM" only in new script
dplyr::mutate(Month = lubridate::month(Date.y)) %>%
dplyr::mutate(Day = lubridate::day(Date.y)) %>%
dplyr::select(GNISIDNAME,Area_Total_Cells,Date.y,MIN,MAX,MEAN,STD,MEDIAN,Year,Month,Day,TEXT_Day)
View(zonal_results_filter)
# ---
dates <- readxl::read_excel("./data/calendar-dates.xlsx")
colnames(dates)
zonal_results_filter <- zonl_results_final %>%
dplyr::left_join(resolvable_lakes, by=c("GNISIDNAME"="GNIS_Name_ID")) %>%
dplyr::mutate(Date = as.character(Date)) %>%
dplyr::left_join(dates, by=c("Date"="CyAN_File_NUM")) %>% # will be "CyAN_File_NUM" only in new script
dplyr::mutate(Month = lubridate::month(Date.y)) %>%
dplyr::mutate(Day = lubridate::day(Date.y)) %>%
dplyr::select(GNISIDNAME,Area_Total_Cells,Date.y,MIN,MAX,MEAN,STD,MEDIAN,Year,Month,Day,Julian_day)
zonal_results_filter <- zonl_results_final %>%
dplyr::left_join(resolvable_lakes, by=c("GNISIDNAME"="GNIS_Name_ID")) %>%
dplyr::mutate(Date = as.character(Date)) %>%
dplyr::left_join(dates, by=c("Date"="CyAN_File_NUM")) %>% # will be "CyAN_File_NUM" only in new script
dplyr::mutate(Month = lubridate::month(Date.y)) %>%
dplyr::mutate(Day = lubridate::day(Date.y)) %>%
dplyr::select(GNISIDNAME,Area_Total_Cells,Date.y,MIN,MAX,MEAN,STD,MEDIAN,Year,Month,Day,Julian_day) %>%
dplyr::rename(Date = Date.y)
zonal_results_filter <- zonl_results_final %>%
dplyr::left_join(resolvable_lakes, by=c("GNISIDNAME"="GNIS_Name_ID")) %>%
dplyr::mutate(Date = as.character(Date)) %>%
dplyr::left_join(dates, by=c("Date"="CyAN_File_NUM")) %>% # will be "CyAN_File_NUM" only in new script
dplyr::mutate(Month = lubridate::month(Date.y)) %>%
dplyr::mutate(Day = lubridate::day(Date.y)) %>%
dplyr::select(GNISIDNAME,Area_Total_Cells,Date.y,MIN,MAX,MEAN,STD,MEDIAN,Year,Month,Day,Julian_day) %>%
dplyr::rename(Date = Date.y) %>%
dplyr::arrange(Date,GNISIDNAME)
View(zonal_results_filter )
zonal_results_filter <- zonl_results_final %>%
dplyr::left_join(resolvable_lakes, by=c("GNISIDNAME"="GNIS_Name_ID")) %>%
dplyr::mutate(Date = as.character(Date)) %>%
dplyr::left_join(dates, by=c("Date"="CyAN_File_NUM")) %>% # will be "CyAN_File_NUM" only in new script
dplyr::mutate(Month = lubridate::month(Date.y)) %>%
dplyr::mutate(Day = lubridate::day(Date.y)) %>%
dplyr::select(GNISIDNAME,Area_Total_Cells,Date.y,MIN,MAX,MEAN,STD,MEDIAN,Year,Month,Day,Julian_day) %>%
dplyr::rename(Date = Date.y) %>%
dplyr::arrange(Date,GNISIDNAME) %>%
dplyr::distinct(Date,GNISIDNAME)
zonal_results_filter <- zonl_results_final %>%
dplyr::left_join(resolvable_lakes, by=c("GNISIDNAME"="GNIS_Name_ID")) %>%
dplyr::mutate(Date = as.character(Date)) %>%
dplyr::left_join(dates, by=c("Date"="CyAN_File_NUM")) %>% # will be "CyAN_File_NUM" only in new script
dplyr::mutate(Month = lubridate::month(Date.y)) %>%
dplyr::mutate(Day = lubridate::day(Date.y)) %>%
dplyr::select(GNISIDNAME,Area_Total_Cells,Date.y,MIN,MAX,MEAN,STD,MEDIAN,Year,Month,Day,Julian_day) %>%
dplyr::rename(Date = Date.y) %>%
dplyr::arrange(Date,GNISIDNAME) %>%
dplyr::distinct(Date,GNISIDNAME,.keep_all = TRUE)
write.csv(zonal_results_filter, "zonal_results.csv", row.names = FALSE)
# Zonal -----
# Set the directory where your CSV files are located
folder_path <- "//deqhq1/WQ-Share/Harmful Algal Blooms Coordination Team/Satellite data/CyAN_Data_V5/MERIS/temp/"
# List all CSV files with names starting with "zonal_result_"
csv_files <- list.files(folder_path, pattern = "zonal_result_.*\\.csv$", full.names = TRUE)
csv_files
# Define the path for the big CSV file
zonal_results <- "//deqhq1/WQ-Share/Harmful Algal Blooms Coordination Team/Satellite data/CyAN_Data_V5/Sentinel-3/CI_cyano/zonal_results_m.csv"
# Initialize a list to store the data frames
all_data <- list()
# Loop through each CSV file and read its content into a data frame
for (file in csv_files) {
print(file)
data <- read.csv(file)
# Ensure GNISIDNAME column is character type
if ("GNISIDNAME" %in% names(data) && !is.character(data$GNISIDNAME)) {
data$GNISIDNAME <- as.character(data$GNISIDNAME)
}
all_data[[file]] <- data
}
# Loop through each CSV file and read its content into a data frame
for (file in csv_files) {
print(file)
# Attempt to read the CSV file
result <- tryCatch({
read.csv(file)
}, error = function(e) {
warning(paste("Error reading file:", file, "- Skipping this file"))
NULL
})
# If reading was successful, add the data frame to the list
if (!is.null(result)) {
# Ensure GNISIDNAME column is character type
if ("GNISIDNAME" %in% names(result) && !is.character(result$GNISIDNAME)) {
result$GNISIDNAME <- as.character(result$GNISIDNAME)
}
all_data[[file]] <- result
}
}
# Combine all data frames into one
combined_df <- bind_rows(all_data)
# Write the combined data frame to the final CSV file
write.csv(combined_df, zonal_results, row.names = FALSE)
# ---
dates <- readxl::read_excel("./data/calendar-dates.xlsx")
resolvable_lakes <- readxl::read_excel("./data/Resolvable_Lakes.xlsx")
zonl_results_final <- read.csv(zonal_results)
colnames(dates)
colnames(zonl_results_final)
zonal_results_filter <- zonl_results_final %>%
dplyr::left_join(resolvable_lakes, by=c("GNISIDNAME"="GNIS_Name_ID")) %>%
dplyr::mutate(Date = as.character(Date)) %>%
dplyr::left_join(dates, by=c("Date"="CyAN_File_NUM")) %>% # will be "CyAN_File_NUM" only in new script
dplyr::mutate(Month = lubridate::month(Date.y)) %>%
dplyr::mutate(Day = lubridate::day(Date.y)) %>%
dplyr::select(GNISIDNAME,Area_Total_Cells,Date.y,MIN,MAX,MEAN,STD,MEDIAN,Year,Month,Day,Julian_day) %>%
dplyr::rename(Date = Date.y) %>%
dplyr::arrange(Date,GNISIDNAME) %>%
dplyr::distinct(Date,GNISIDNAME,.keep_all = TRUE)
# ---
dates <- readxl::read_excel("./data/calendar-dates.xlsx")
resolvable_lakes <- readxl::read_excel("./data/Resolvable_Lakes.xlsx")
zonl_results_final <- read.csv(zonal_results)
zonal_results_filter <- zonl_results_final %>%
dplyr::left_join(resolvable_lakes, by=c("GNISIDNAME"="GNIS_Name_ID")) %>%
dplyr::mutate(Date = as.character(Date)) %>%
dplyr::left_join(dates, by=c("Date"="CyAN_File_NUM")) %>% # will be "CyAN_File_NUM" only in new script
dplyr::mutate(Month = lubridate::month(Date.y)) %>%
dplyr::mutate(Day = lubridate::day(Date.y)) %>%
dplyr::select(GNISIDNAME,Area_Total_Cells,Date.y,MIN,MAX,MEAN,STD,MEDIAN,Year,Month,Day,Julian_day) %>%
dplyr::rename(Date = Date.y) %>%
dplyr::arrange(Date,GNISIDNAME) %>%
dplyr::distinct(Date,GNISIDNAME,.keep_all = TRUE)
write.csv(zonal_results_filter, "zonal_results_m.csv", row.names = FALSE)
